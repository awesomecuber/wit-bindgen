// Generated by `wit-bindgen` 0.13.0. DO NOT EDIT!
pub mod foo {
  pub mod foo {
    
    #[allow(clippy::all)]
    pub mod chars {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      #[allow(clippy::all)]
      /// A function that accepts a character
      pub fn take_char(x: char,){
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/chars")]
          extern "C" {
            #[link_name = "take-char"]
            fn wit_import(_: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, ){ unreachable!() }
          wit_import(wit_bindgen::rt::as_i32(x));
        }
      }
      #[allow(clippy::all)]
      /// A function that returns a character
      pub fn return_char() -> char{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "foo:foo/chars")]
          extern "C" {
            #[link_name = "return-char"]
            fn wit_import() -> i32;
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import() -> i32{ unreachable!() }
          let ret = wit_import();
          wit_bindgen::rt::char_lift(ret as u32)
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod foo {
    pub mod foo {
      
      #[allow(clippy::all)]
      pub mod chars {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/chars#take-char"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_take_char(arg0: i32,) {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            <_GuestImpl as Guest>::take_char(wit_bindgen::rt::char_lift(arg0 as u32));
          }
        };
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "foo:foo/chars#return-char"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_return_char() -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let result0 = <_GuestImpl as Guest>::return_char();
            wit_bindgen::rt::as_i32(result0)
          }
        };
        use super::super::super::super::Stub as _GuestImpl;
        pub trait Guest {
          /// A function that accepts a character
          fn take_char(x: char,);
          /// A function that returns a character
          fn return_char() -> char;
        }
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:the-world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 489] = [3, 0, 9, 116, 104, 101, 45, 119, 111, 114, 108, 100, 0, 97, 115, 109, 13, 0, 1, 0, 7, 220, 1, 1, 65, 4, 1, 66, 4, 1, 64, 1, 1, 120, 116, 1, 0, 4, 0, 9, 116, 97, 107, 101, 45, 99, 104, 97, 114, 1, 0, 1, 64, 0, 0, 116, 4, 0, 11, 114, 101, 116, 117, 114, 110, 45, 99, 104, 97, 114, 1, 1, 4, 1, 13, 102, 111, 111, 58, 102, 111, 111, 47, 99, 104, 97, 114, 115, 5, 0, 1, 65, 4, 1, 66, 4, 1, 64, 1, 1, 120, 116, 1, 0, 4, 0, 9, 116, 97, 107, 101, 45, 99, 104, 97, 114, 1, 0, 1, 64, 0, 0, 116, 4, 0, 11, 114, 101, 116, 117, 114, 110, 45, 99, 104, 97, 114, 1, 1, 3, 1, 13, 102, 111, 111, 58, 102, 111, 111, 47, 99, 104, 97, 114, 115, 5, 0, 1, 66, 4, 1, 64, 1, 1, 120, 116, 1, 0, 4, 0, 9, 116, 97, 107, 101, 45, 99, 104, 97, 114, 1, 0, 1, 64, 0, 0, 116, 4, 0, 11, 114, 101, 116, 117, 114, 110, 45, 99, 104, 97, 114, 1, 1, 4, 1, 13, 102, 111, 111, 58, 102, 111, 111, 47, 99, 104, 97, 114, 115, 5, 1, 4, 1, 17, 102, 111, 111, 58, 102, 111, 111, 47, 116, 104, 101, 45, 119, 111, 114, 108, 100, 4, 1, 11, 17, 1, 1, 11, 102, 111, 111, 58, 102, 111, 111, 47, 119, 105, 116, 3, 0, 0, 0, 152, 1, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 99, 104, 97, 114, 115, 34, 58, 123, 34, 102, 117, 110, 99, 115, 34, 58, 123, 34, 116, 97, 107, 101, 45, 99, 104, 97, 114, 34, 58, 34, 65, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 97, 99, 99, 101, 112, 116, 115, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 34, 44, 34, 114, 101, 116, 117, 114, 110, 45, 99, 104, 97, 114, 34, 58, 34, 65, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 114, 101, 116, 117, 114, 110, 115, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 34, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 54, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}

#[derive(Debug)]
pub struct Stub;
impl exports::foo::foo::chars::Guest for Stub {
  /// A function that accepts a character
  fn take_char(x: char,){ unreachable!() }
  /// A function that returns a character
  fn return_char() -> char{ unreachable!() }
}
